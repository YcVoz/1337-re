class Solution {
public:
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start_node, int end_node) {
        vector<vector<int>> edge(n);
        vector<double> ansarr(n, 0);
        map<pair<int, int>, double>prob_map;
        ansarr[start_node] = 1;
        queue<int> q1;
        q1.push(start_node);
        int now_i;
        double nowprob;
        double tmpprob;
        for(int i=0;i<edges.size();i++){
            edge[edges[i][0]].push_back(edges[i][1]);
            edge[edges[i][1]].push_back(edges[i][0]);
            prob_map[{edges[i][0], edges[i][1]}] = succProb[i];
            prob_map[{edges[i][1], edges[i][0]}] = succProb[i];
        }
        while(!q1.empty()){
            now_i = q1.front();
            q1.pop();
            for(int i:edge[now_i]){
                tmpprob = prob_map[{now_i, i}]*ansarr[now_i];
                if(tmpprob>ansarr[i]){
                    ansarr[i] = tmpprob;
                    q1.push(i);
                }
            }
        }
        return ansarr[end_node];
    }
};
