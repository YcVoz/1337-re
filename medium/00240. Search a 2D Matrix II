class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        return healper(matrix, target, 0, matrix.size()-1, 0, matrix[0].size()-1);
    }
    bool healper(vector<vector<int>>& matrix, int target, int row1, int row2, int col1, int col2 ){
        if(row1<0 || col1<0 || row2>=matrix.size() || col2>=matrix[0].size() || row1>row2 || col1 > col2)return 0;
        if(row1==row2){
            int l = col1;
            int r = col2;
            if(matrix[row1][l]==target || matrix[row1][r]==target)return 1;
            while(l+1<r){
                int m = (l+r)/2;
                if(matrix[row1][m]>target)r = m;
                else if(matrix[row1][m]<target)l = m;
                else return 1;
            }
            return 0;
        }
        if(col1==col2){
            int l = row1;
            int r = row2;
            if(matrix[l][col1]==target || matrix[r][col1]==target)return 1;
            while(l+1<r){
                int m = (l+r)/2;
                if(matrix[m][col1]>target)r = m;
                else if(matrix[m][col1]<target)l = m;
                else return 1;
            }
            return 0;
        }
        int coll = col1;
        int rowl = row1;
        int d = min(row2-row1, col2-col1);
        int rowr = rowl+d;
        int colr = coll+d;
        int l = 0;
        int r = d;
        if(matrix[rowl][coll]==target || matrix[rowr][colr]==target)return 1;
        if(matrix[rowl][coll]>target)return 0;
        if(matrix[rowr][colr]<target){
            if(row2-row1 > col2-col1){
                return healper(matrix, target, rowr+1, row2, col1, col2);
            }
            else{
                return healper(matrix, target, row1, row2, colr+1, col2);
            }
        }
        while(l+1<r){
            int m = (l+r)/2;
            if(matrix[rowl+m][coll+m]>target)r = m;
            else if(matrix[rowl+m][coll+m]<target)l = m;
            else return 1;
        }
        return healper(matrix, target, row1, row1+l, col1+r, col2) || healper(matrix, target, row1+r, row2, col1, col1+l);
    }
};
