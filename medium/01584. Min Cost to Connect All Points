class Solution {
public:
    vector<int> father;
    int findFather(int x){
        return father[x]==x?x:(father[x]=findFather(father[x]));
    }
    void unionFather(int x, int y){
        if(findFather(x)<findFather(y))father[father[y]] = father[x];
        else father[father[x]] = father[y];
    }
    int minCostConnectPoints(vector<vector<int>>& points) {
        int n = points.size();
        int ret = 0;
        int remain = n-1;
        father.resize(n);
        vector<pair<int, pair<int, int>>> v1(0);
        for(int i=0;i<n;i++){
            father[i] = i;
            for(int u=i+1;u<n;u++)v1.push_back({abs(points[i][0]-points[u][0])+abs(points[i][1]-points[u][1]), {i, u}});
        }
        sort(v1.begin(), v1.end());
        for(auto p1:v1){
            if(remain==0)return ret;
            if(findFather(p1.second.first)==findFather(p1.second.second))continue;
            unionFather(p1.second.first, p1.second.second);
            ret += p1.first;
            remain--;
        }
        return ret;
    }
};
