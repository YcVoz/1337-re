class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> ret;
        dfs(ret, vector<int>(0), target, candidates, 0);
        return ret;
    }
    void dfs(vector<vector<int>>& ret, vector<int> now, int target, vector<int>& candidates, int index){
        for(int i=index;i<candidates.size();i++){
            if(candidates[i]<target){
                now.emplace_back(candidates[i]);
                dfs(ret, now, target-candidates[i], candidates, i);
                now.resize(now.size()-1);
            }
            else if(candidates[i]==target){
                now.emplace_back(candidates[i]);
                ret.emplace_back(now);
                now.resize(now.size()-1);
            }
        }
    }
};
