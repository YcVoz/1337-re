class Solution {
public:
    int search(vector<int>& nums, int target) {
        int n = nums.size();
        int l = 0;
        int r = n-1;   
        if(nums[l]==target)
            return l;
        if(nums[r]==target)
            return r;
        if(r-l==2){
            if(nums[l+1]==target)
                return l+1;
            return -1;
        }
        stack<pair<int,int>> s1;
        s1.push({l,r});
        while(!s1.empty()){
            l = s1.top().first;
            r = s1.top().second;
            s1.pop();
            if(r-l==2 && nums[l+1]==target){
                return l+1;
            }
            else if(r-l>2){
                int q1 = (r-l)/3+l;
                int q2 = (r-l)*2/3+l;
                if(nums[q1]==target)
                    return q1;
                if(nums[q2]==target)
                    return q2;
                if(nums[q1]<nums[q2]){
                    if(nums[q2]>target && target>nums[q1]){
                        s1.push({q1,q2});
                    }
                    else{
                        s1.push({l,q1});
                        s1.push({q2,r});
                    }
                }
                else{
                    if(target>nums[q1] || target<nums[q2]){
                        s1.push({q1,q2});
                    }
                    else{
                        s1.push({l,q1});
                        s1.push({q2,r});
                    }
                }
            }
        }
        return -1;
    }
};
