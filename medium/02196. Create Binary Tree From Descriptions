/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* createBinaryTree(vector<vector<int>>& descriptions) {
        unordered_map<int, TreeNode*> m0;
        unordered_set<int> s0;
        TreeNode* tmp_parent;
        TreeNode* tmp_child;
        int tmp;
        for(const auto d:descriptions){
            s0.insert(d[1]);
            if(m0.find(d[0])==m0.end())m0[d[0]] = new TreeNode(d[0]);
            tmp_parent = m0[d[0]];
            if(m0.find(d[1])==m0.end())m0[d[1]] = new TreeNode(d[1]);
            tmp_child = m0[d[1]];
            if(d[2])tmp_parent->left = tmp_child;
            else tmp_parent->right = tmp_child;
        }
        for(const auto d:descriptions){
            int tmp = d[0];
            if (s0.find(tmp) == s0.end()) {
                tmp_parent = m0[tmp];
                return tmp_parent;
            }
        }
        return NULL;
    }
};
