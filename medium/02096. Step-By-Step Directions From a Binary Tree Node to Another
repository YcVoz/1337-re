/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    string start_str;
    string dest_str;
    string getDirections(TreeNode* root, int startValue, int destValue) {
        start_str = "X";
        dest_str = "X";
        string now_str = "";
        string ret = "";
        int len, start;
        step(root, now_str, startValue, destValue);
        len = min(start_str.size(), dest_str.size());
        start = len;
        for(int i=0;i<len && start==len;i++)if(start_str[i]!=dest_str[i])start = i;
        for(int i=start;i<start_str.size();i++)ret += "U";
        for(int i=start;i<dest_str.size();i++)ret += dest_str[i];
        return ret;
    }
    void step(TreeNode* root, string& now_str, int& startValue, int& destValue){
        if(!root)return;
        if(root->val==startValue)start_str = now_str;
        else if(root->val==destValue)dest_str = now_str;
        if(start_str != "X" && dest_str !="X")return;
        now_str+='L';
        step(root->left, now_str, startValue, destValue);
        now_str[now_str.size()-1] = 'R';
        step(root->right, now_str, startValue, destValue);
        now_str.pop_back();
        return;
    }
};
