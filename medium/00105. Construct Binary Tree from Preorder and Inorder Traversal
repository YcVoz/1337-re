/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    map<int, int> value_to_index_preorder;
    map<int, int> value_to_index_inorder;
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int n = preorder.size()-1;
        for(int i=0;i<=n;i++){
            value_to_index_preorder[preorder[i]] = i;
            value_to_index_inorder[inorder[i]] = i;
        }
        return buildTree_withStartAndEnd(preorder, inorder, 0, n, 0, n);
    }
    TreeNode* buildTree_withStartAndEnd(vector<int>& preorder, vector<int>& inorder, int preorder_start, int preorder_end, int inorder_start, int inorder_end){
        if(preorder_start>preorder_end || inorder_start>inorder_end)return NULL;
        if(inorder_start==inorder_end)return new TreeNode(inorder[inorder_start]);
        int root_value = preorder[preorder_start];
        int rootIndex_inorder = value_to_index_inorder[root_value];
        int edgeIndex_preorder = rootIndex_inorder-inorder_start+preorder_start+1;
        return new TreeNode(root_value, buildTree_withStartAndEnd(preorder, inorder, preorder_start+1, edgeIndex_preorder-1, inorder_start, rootIndex_inorder-1), buildTree_withStartAndEnd(preorder, inorder, edgeIndex_preorder, preorder_end, rootIndex_inorder+1, inorder_end));
    }
};
