class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();
        if(obstacleGrid[m-1][n-1]==1 || obstacleGrid[0][0]==1)
            return 0;
        queue<pair<int,int>> q1;
        vector<vector<int>> ret(m,vector<int>(n,0));
        vector<vector<bool>> check(m,vector<bool>(n,1));
        ret[0][0] = 1;
        q1.push({0,0});
        while(!q1.empty()){
            int x = q1.front().first;
            int y = q1.front().second;
            q1.pop();
            if(x+1<m && obstacleGrid[x+1][y]==0){
                ret[x+1][y] += ret[x][y];
                if(check[x+1][y]){
                    q1.push({x+1,y});
                    check[x+1][y] = 0;
                }
            }
            if(y+1<n && obstacleGrid[x][y+1]==0){
                ret[x][y+1] += ret[x][y];
                if(check[x][y+1]){
                    q1.push({x,y+1});
                    check[x][y+1] = 0;
                }
            }
        }
        return ret[m-1][n-1];
    }
};
