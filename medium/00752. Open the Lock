class Solution {
public:
    int openLock(vector<string>& deadends, string target) {
        int tmp_size = 0;
        int next_check_int = -1;
        int count = 0;
        string now_check = "-1";
        string next_check = "-1";
        vector<int> v1(10000, -1);
        queue<string> q1;
        if(target == "0000")return count;
        for(string s:deadends){
            v1[stoi(s)] = -2;
            if(s=="0000")return -1;
        }
        q1.push("0000");
        v1[0] = 0;
        while(!q1.empty()){
            tmp_size = q1.size();
            count++;
            for(int i=0;i<tmp_size;i++){
                now_check = q1.front();
                q1.pop();
                for(int bit=0;bit<4;bit++){
                    for(int isup=0;isup<2;isup++){
                        helper(now_check, next_check, bit, isup);
                        next_check_int = stoi(next_check);
                        if(next_check==target)return count;
                        if(v1[next_check_int]==-1){
                            v1[next_check_int] = count;
                            q1.push(next_check);
                        }
                    }
                }
            }
        }
        return -1;
    }
    void helper(string now_check, string& next_check, int& bit, int& isup){
        if(isup){
            if(now_check[bit]=='9')now_check[bit] = '0';
            else now_check[bit] = now_check[bit]+1;
        }
        else{
            if(now_check[bit]=='0')now_check[bit] = '9';
            else now_check[bit] = now_check[bit]-1;
        }
        next_check = now_check;
    }
};
