/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> ret;
    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {
        set<int> s(to_delete.begin(), to_delete.end());
        travel(root, s, 1);
        return ret;
    }
    void travel(TreeNode* root, set<int>& s, bool addMyself) {
        if(root==NULL)return;
        if(s.find(root->val)!=s.end()){
            travel(root->left, s, 1);
            travel(root->right, s, 1);
            return;
        }
        if(addMyself)ret.push_back(root);
        if(root->left!=NULL){
            if(s.find(root->left->val)!=s.end()){
                travel(root->left, s, 1);
                root->left = NULL;
            }
            else travel(root->left, s, 0);
        }
        if(root->right!=NULL){
            if(s.find(root->right->val)!=s.end()){
                travel(root->right, s, 1);
                root->right = NULL;
            }
            else travel(root->right, s, 0);
        }
    }
};
