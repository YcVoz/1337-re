class Solution {
public:
    int longestStrChain(vector<string>& words) {
        int n = words.size();
        int ret = 1;
        sort(words.begin(), words.end(), [](string& a, string& b){ return a.size() < b.size(); });
        unordered_map<string, int> dp;
        for (string word : words) {
            dp[word] = 1;
            for (int i = 0; i < word.size(); ++i) {
                string pre = word.substr(0, i) + word.substr(i + 1);
                if (dp.count(pre)) {
                    dp[word] = max(dp[word], dp[pre] + 1);
                    ret = max(ret, dp[word]);
                }
            }
        }
        return ret;
    }
};
