class Solution {
public:
    int m = 0;
    int n = 0;
    vector<int> direction = {1, 0, -1, 0, 1};
    bool exist(vector<vector<char>>& board, string word) {
        m = board.size();
        n = board[0].size();
        vector<vector<bool>> visited(m, vector<bool>(n,0));
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(word[0]==board[i][j]){
                    visited[i][j] = 1;
                    if(helper(board, visited, word, 1, i, j))
                        return true;
                    visited[i][j] = 0;
                }
            }
        }
        return false;
    }
    bool helper(vector<vector<char>>& board, vector<vector<bool>>& visited, string word, int index, int x, int y){
        if(index>=word.size())return true;
        for(int d=0;d<4;d++){
            int new_x = x+direction[d];
            int new_y = y+direction[d+1];
            if(new_x>=0 && new_y>=0 && new_x<m && new_y<n && !visited[new_x][new_y] && board[new_x][new_y]==word[index]){
                visited[new_x][new_y] = 1;
                if(helper(board, visited, word, index+1, new_x, new_y))
                    return true;
                visited[new_x][new_y] = 0;
            }
        }
        return false;
    }
};
